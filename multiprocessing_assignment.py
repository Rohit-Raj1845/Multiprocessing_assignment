QUESTION:-1. What is multiprocessing in python? Why is it useful?
Multiprocessing is a package that supports spawning processes using an API similar to the threading module. A built-in package that allows the system to run multiple processes simultaneously. 



QUESTION:-2. What are the differences between multiprocessing and multithreading?
Multiprocessing :- 
(i). It is a technique where multiple processes run across multiple cores at the same time.
(ii). Each program has its own interpreter that executes different processes at the same time.
(iii). Multiple processes actually run parallelly as the multiprocessing module streamlines the independent processes by using sub-processes.
(iv). Python multiprocessing implements parallelism.

Multithreading :-
(i). It is a technique where multiple threads are generated by a single process at the same time.
(ii). The GIL does not allow the threads to run simultaneously.
(iii). It gives a feeling that threads are running simultaneously, but they work concurrently.
(iv). Python multithreading implements concurrency.



QUESTION:-3. Write a python code to create a process using the multiprocessing module.
import multiprocessing
def print_cube(num): 
    print("Cube: {}".format(num * num * num))

def print_square(num): 
    print("Square: {}".format(num * num))

if __name__ == "__main__": 
    p1 = multiprocessing.Process(target = print_square, args = (10,))
    p2 = multiprocessing.Process(target = print_cube, args = (10,))

    p1.start()
    p2.start()

    p1.join()
    p2.join()
    print("Done!")   



QUESTION:-4. What is a multiprocessing pool in python? Why is it used?
Python multiprocessing pool can be used for parallel execution of a function across multiple input values.It allows you to run multiple jobs per process (due to its ability to queue the jobs).



QUESTION:-5. How can we create a pool of worker processes in python using the multiprocessing module?
import multiprocessing
def worker_function(number):
    result = number * 2
    return result

if __name__ == '__main__':
    num_processes = multiprocessing.cpu_count()  
    pool = multiprocessing.Pool(processes=num_processes)
    tasks = [1, 2, 3, 4, 5]
    results = pool.map(worker_function, tasks)
    pool.close()
    pool.join()
    print("Results:", results)



QUESTION:-6. Write a python program to create 4 processes, each process should print a different number using the multiprocessing module in python.
import multiprocessing

def print_number(number):
    print("Process", number, "is printing the number", number)

if __name__ == '__main__':
    processes = []
    
    for i in range(4):
        p = multiprocessing.Process(target=print_number, args=(i,))
        processes.append(p)
        p.start()

    for p in processes:
        p.join()
